import shutil
import os

from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext

from app.keyboards.back_to_main import back_to_main
from app.keyboards.issue_type import issue_type
from app.keyboards.yes_no import yes_no
from app.keyboards.confirmation import confirmation
from app.keyboards.found_user_confirmation import found_user_confirmation
from app.keyboards.region import region
from app.keyboards.medical_organization import medical_organization
from app.keyboards.first_media_yes_no import first_media_yes_no
from app.keyboards.second_media_yes_no import second_media_yes_no
from app.keyboards.third_media_yes_no import third_media_yes_no
from app.keyboards.fourth_media_yes_no import fourth_media_yes_no

from app.scripts.create_new_ticket import create_new_ticket
from app.scripts.find_user_in_db import find_user_in_db
from app.scripts.create_new_user_in_db import create_new_user_in_db

from app.tasks.celery import get_user_task
from app.tasks.celery import update_user_task


create_ticket_router = Router()


class Request(StatesGroup):
    region = State()
    medical_organization = State()
    name = State()
    position = State()
    phone = State()
    request_type = State()
    request_description = State()
    first_media = State()
    second_media = State()
    third_media = State()
    fourth_media = State()


@create_ticket_router.callback_query(F.data == "make_request")
async def make_request(callback: CallbackQuery, state: FSMContext) -> None:
    content = "‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï ‚ö†Ô∏è\n–ó–∞—è–≤–∫–∏ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É " \
              "–Ω–æ–≤–æ–≥–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞, –∑–∞—è–≤–∫–∏ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π " \
              "–∏ –∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–æ—Å—Ç—É–ø–∞, –∞ —Ç–∞–∫–∂–µ –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ " \
              "–æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å <b>–¢–û–õ–¨–ö–û</b> –ø–∏—Å—å–º–æ–º –Ω–∞ –ø–æ—á—Ç—É " \
              "support@across.ru"
    
    result = get_user_task.delay(callback.from_user.id)

    user_data = result.get()

    if user_data is None:
        await callback.message.edit_text(content, parse_mode="HTML",
                                     reply_markup=confirmation())
    elif user_data[0] and user_data[1] and user_data[2] and user_data[3] and user_data[4]:
        await callback.message.edit_text(content, parse_mode="HTML",
                                     reply_markup=found_user_confirmation())
    else:
        await callback.message.edit_text(content, parse_mode="HTML",
                                     reply_markup=confirmation())


@create_ticket_router.callback_query(F.data == "further")
async def futher(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.region)

    content = "–£–∫–∞–∂–∏—Ç–µ –í–∞—à —Ä–µ–≥–∏–æ–Ω üåçüåéüåè –∏–∑ —Å–ø–∏—Å–∫–∞ –≤–Ω–∏–∑—É üîΩ"

    await callback.message.edit_text(content,
                                     parse_mode="HTML",
                                     reply_markup=region())


@create_ticket_router.callback_query(Request.region)
async def region_state(callback: CallbackQuery, state: FSMContext) -> None:
    if callback.data == "Belgorod":
        region_data = "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å"

    await state.update_data({"region": callback.data})
    update_user_task.delay(callback.from_user.id, region=region_data)
    await state.set_state(Request.medical_organization)

    content = "–í—ã–±–µ—Ä–∏—Ç–µ –í–∞—à—É –º–µ–¥–∏—Ü–∏–Ω—Å–∫—É—é –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—é üè•"

    await callback.message.answer(content,
                                  reply_markup=medical_organization())


@create_ticket_router.callback_query(Request.medical_organization)
async def organization(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data({"medical_organization": str(callback.data)})
    update_user_task.delay(callback.from_user.id, medical_organization=callback.data)
    await state.set_state(Request.name)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à–µ –§–ò–û üõÇ"

    await callback.message.answer(content,
                                  reply_markup=back_to_main())


@create_ticket_router.message(Request.name)
async def name(message: Message, state: FSMContext) -> None:
    await state.update_data({"name": message.text})
    update_user_task.delay(message.from_user.id, name=message.text)
    await state.set_state(Request.position)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à—É –¥–æ–ª–∂–Ω–æ—Å—Ç—å üë®‚Äç‚öïÔ∏èüë©‚Äç‚öïÔ∏è"

    await message.answer(content,
                         reply_markup=back_to_main())


@create_ticket_router.message(Request.position)
async def position(message: Message, state: FSMContext) -> None:
    await state.update_data({"position": message.text})
    update_user_task.delay(message.from_user.id, position=message.text)
    await state.set_state(Request.phone)

    content = "–ù–∞–ø–∏—à–∏—Ç–µ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ 9101234567 (–±–µ–∑ 8 –∏ –±–µ–∑ +7) üì±"

    await message.answer(content,
                         reply_markup=back_to_main())


@create_ticket_router.message(Request.phone)
async def phone(message: Message, state: FSMContext) -> None:
    if len(message.text) != 10 or message.text[0] == "+":
        content = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ üö´"

        return await message.answer(content)
    else:
        await state.update_data({"phone": message.text})
        update_user_task.delay(message.from_user.id, phone=message.text)
        await state.set_state(Request.request_type)

        content = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ üìù"

        await message.answer(content,
                             reply_markup=issue_type())
        

@create_ticket_router.callback_query(F.data == "found_user_further")
async def found_user_further(callback: CallbackQuery, state: FSMContext) -> None:
    await state.set_state(Request.request_type)

    content = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞—è–≤–∫–∏ üìù"

    await callback.message.edit_text(content,
                                     reply_markup=issue_type())


@create_ticket_router.callback_query(Request.request_type)
async def request_type(callback: CallbackQuery, state: FSMContext) -> None:
    await state.update_data({"request_type": callback.data})
    await state.set_state(Request.first_media)

    try:
        directory_path = f'app/photos/{callback.from_user.id}'
        shutil.rmtree(directory_path)
        print(f"Deleted directory: {directory_path}")
    except OSError as e:
        print(f"Error deleting directory {directory_path}: {e}")

    if callback.data == "critical":
        content = "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É üìù, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n" \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"
    elif callback.data == "no_exchange":
        content = "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –®–ö –õ–ò–° –∏–ª–∏ –ò–î–ú–ò–° üìù, " \
                  "–º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n" \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"
    elif callback.data == "no_connection":
        content = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä–∞, –®–ö –õ–ò–° –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ " \
                  "–æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üìù, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n" \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"
    elif callback.data == "other":
        content = "–ü–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –í–∞—à—É –ø—Ä–æ–±–ª–µ–º—É üìù, –º–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏\n" \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"
        
    await callback.message.answer(content, parse_mode="HTML",
                                  reply_markup=back_to_main())


@create_ticket_router.message(Request.first_media)
async def first_media(message: Message, state: FSMContext) -> None:
    if message.photo:
        if message.caption is None:
            content = '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã üö´\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'

            return await message.answer(content)
        else:
            await state.update_data({"first_media": 'photo'})
            await state.update_data({"request_description": message.caption})
            message_photo_id = message.photo[-1].file_id

            directory_path = f'app/photos/{message.from_user.id}'
            os.makedirs(directory_path, exist_ok=True)

            await message.bot.download(file=message_photo_id,
                                    destination=f"{directory_path}/{message_photo_id}.jpg")
        
            content = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç?\n' \
                      '–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ ' \
                      '–∫ –∑–∞—è–≤–∫–µ.\n' \
                      "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"

            await message.answer(content, parse_mode="HTML",
                                reply_markup=first_media_yes_no())
    else:
        await state.update_data({"request_description": message.text})
        await state.set_state(Request.request_description)

        content = '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É?'

        await message.answer(content,
                            reply_markup=yes_no())
        

@create_ticket_router.callback_query(F.data == 'first_media_yes')
async def first_media_yes(callback: CallbackQuery, state: FSMContext) -> None:
    content = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏'
    await state.set_state(Request.second_media)
    await callback.message.edit_text(content)


@create_ticket_router.message(Request.second_media)
async def second_media(message: Message) -> None:
    if message.photo:
        message_photo_id = message.photo[-1].file_id

        directory_path = f'app/photos/{message.from_user.id}'
        os.makedirs(directory_path, exist_ok=True)

        await message.bot.download(file=message_photo_id,
                                    destination=f"{directory_path}/{message_photo_id}.jpg")
        
        content = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç?\n' \
                  '–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ ' \
                  '–∫ –∑–∞—è–≤–∫–µ.\n' \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"

        await message.answer(content, parse_mode="HTML",
                            reply_markup=second_media_yes_no())
    else:
        content = '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üö´\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'

        await message.answer(content)


@create_ticket_router.callback_query(F.data == 'second_media_yes')
async def second_media_yes(callback: CallbackQuery, state: FSMContext) -> None:
    content = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏'
    await state.set_state(Request.third_media)
    await callback.message.edit_text(content)


@create_ticket_router.message(Request.third_media)
async def third_media(message: Message) -> None:
    if message.photo:
        message_photo_id = message.photo[-1].file_id

        directory_path = f'app/photos/{message.from_user.id}'
        os.makedirs(directory_path, exist_ok=True)

        await message.bot.download(file=message_photo_id,
                                    destination=f"{directory_path}/{message_photo_id}.jpg")
        
        content = '–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç?\n' \
                  '–í—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ–∑–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ ' \
                  '–∫ –∑–∞—è–≤–∫–µ.\n' \
                  "‚ö†Ô∏è<b>–í–Ω–∏–º–∞–Ω–∏–µ</b>‚ö†Ô∏è\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ç–æ–ª—å–∫–æ –û–î–ù–û —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç‚ùó"

        await message.answer(content, parse_mode="HTML",
                            reply_markup=third_media_yes_no())
    else:
        content = '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üö´\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'

        await message.answer(content)

    

@create_ticket_router.callback_query(F.data == 'third_media_yes')
async def third_media_yes(callback: CallbackQuery, state: FSMContext) -> None:
    content = '–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—â—ë –æ–¥–Ω–æ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üì∏'
    await state.set_state(Request.fourth_media)
    await callback.message.edit_text(content)


@create_ticket_router.message(Request.fourth_media)
async def fourth_media(message: Message) -> None:
    if message.photo:
        message_photo_id = message.photo[-1].file_id

        directory_path = f'app/photos/{message.from_user.id}'
        os.makedirs(directory_path, exist_ok=True)

        await message.bot.download(file=message_photo_id,
                                    destination=f"{directory_path}/{message_photo_id}.jpg")
        
        content = '–°–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É?'

        await message.answer(content,
                            reply_markup=fourth_media_yes_no())
    else:
        content = '–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–æ—Ç–æ/—Å–∫—Ä–∏–Ω—à–æ—Ç üö´\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.'

        await message.answer(content)


@create_ticket_router.callback_query(F.data == 'fourth_media_yes')
async def fourth_media_yes(callback: CallbackQuery, state: FSMContext) -> None:
    chat_id = callback.message.chat.id
    telegram_id = callback.from_user.id

    result = get_user_task.delay(telegram_id)

    user_data = result.get()

    user_name = user_data[0]
    user_position = user_data[1]
    user_region = user_data[2]
    user_phone = user_data[3]
    user_medical_organization = user_data[4]
    fsm_user_data = await state.get_data()
    has_photo = True

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ ‚è≥"
    await callback.message.edit_text(content)

    user_id = await find_user_in_db(user_phone)

    if user_id:
        print(f'User found. user_id = {user_id}')
        
        new_ticket_id = await create_new_ticket(
            telegram_id,
            user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
    elif user_id is None:
        new_user_id = await create_new_user_in_db(
            user_name,
            user_phone,
            user_medical_organization)

        new_ticket_id = await create_new_ticket(
            telegram_id,
            new_user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
        
    await state.clear()
    
    if new_ticket_id is None:
        content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    else:
        content = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {new_ticket_id}"
    await callback.message.answer(content,
                         reply_markup=back_to_main())


@create_ticket_router.callback_query(F.data == "yes_create_ticket")
async def yes_create_ticket(callback: CallbackQuery, state: FSMContext) -> None:
    chat_id = callback.message.chat.id
    telegram_id = callback.from_user.id

    result = get_user_task.delay(telegram_id)

    user_data = result.get()

    user_name = user_data[0]
    user_position = user_data[1]
    user_region = user_data[2]
    user_phone = user_data[3]
    user_medical_organization = user_data[4]
    fsm_user_data = await state.get_data()
    has_photo = False

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ ‚è≥"
    await callback.message.edit_text(content)

    user_id = await find_user_in_db(user_phone)

    if user_id:
        print(f'User found. user_id = {user_id}')
        
        new_ticket_id = await create_new_ticket(
            telegram_id,
            user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
    elif user_id is None:
        new_user_id = await create_new_user_in_db(
            user_name,
            user_phone,
            user_medical_organization)

        new_ticket_id = await create_new_ticket(
            telegram_id,
            new_user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
        
    await state.clear()
    
    if new_ticket_id is None:
        content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    else:
        content = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {new_ticket_id}"
    await callback.message.answer(content,
                         reply_markup=back_to_main())


@create_ticket_router.callback_query(F.data == "first_media_no")
async def first_media_no(callback: CallbackQuery, state: FSMContext) -> None:
    chat_id = callback.message.chat.id
    telegram_id = callback.from_user.id
    
    result = get_user_task.delay(telegram_id)

    user_data = result.get()

    user_name = user_data[0]
    user_position = user_data[1]
    user_region = user_data[2]
    user_phone = user_data[3]
    user_medical_organization = user_data[4]
    fsm_user_data = await state.get_data()
    has_photo = True

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ ‚è≥"
    await callback.message.edit_text(content)

    user_id = await find_user_in_db(user_phone)

    if user_id:
        print(f'User found. user_id = {user_id}')
        
        new_ticket_id = await create_new_ticket(
            telegram_id,
            user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
    elif user_id is None:
        new_user_id = await create_new_user_in_db(
            user_name,
            user_phone,
            user_medical_organization)

        new_ticket_id = await create_new_ticket(
            telegram_id,
            new_user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
        
    await state.clear()
    
    if new_ticket_id is None:
        content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    else:
        content = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {new_ticket_id}"
    await callback.message.answer(content,
                         reply_markup=back_to_main())


@create_ticket_router.callback_query(F.data == "second_media_no")
async def second_media_no(callback: CallbackQuery, state: FSMContext) -> None:
    chat_id = callback.message.chat.id
    telegram_id = callback.from_user.id

    result = get_user_task.delay(telegram_id)

    user_data = result.get()

    user_name = user_data[0]
    user_position = user_data[1]
    user_region = user_data[2]
    user_phone = user_data[3]
    user_medical_organization = user_data[4]
    fsm_user_data = await state.get_data()
    has_photo = True

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ ‚è≥"
    await callback.message.edit_text(content)

    user_id = await find_user_in_db(user_phone)

    if user_id:
        print(f'User found. user_id = {user_id}')
        
        new_ticket_id = await create_new_ticket(
            telegram_id,
            user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
    elif user_id is None:
        new_user_id = await create_new_user_in_db(
            user_name,
            user_phone,
            user_medical_organization)

        new_ticket_id = await create_new_ticket(
            telegram_id,
            new_user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
        
    await state.clear()
    
    if new_ticket_id is None:
        content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    else:
        content = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {new_ticket_id}"
    await callback.message.answer(content,
                         reply_markup=back_to_main())
    

@create_ticket_router.callback_query(F.data == "third_media_no")
async def third_media_no(callback: CallbackQuery, state: FSMContext) -> None:
    chat_id = callback.message.chat.id
    telegram_id = callback.from_user.id

    result = get_user_task.delay(telegram_id)

    user_data = result.get()
    
    user_name = user_data[0]
    user_position = user_data[1]
    user_region = user_data[2]
    user_phone = user_data[3]
    user_medical_organization = user_data[4]
    fsm_user_data = await state.get_data()
    has_photo = True

    content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ, –æ–∂–∏–¥–∞–∏ÃÜ—Ç–µ ‚è≥"
    await callback.message.edit_text(content)

    user_id = await find_user_in_db(user_phone)

    if user_id:
        print(f'User found. user_id = {user_id}')
        
        new_ticket_id = await create_new_ticket(
            telegram_id,
            user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
    elif user_id is None:
        new_user_id = await create_new_user_in_db(
            user_name,
            user_phone,
            user_medical_organization)

        new_ticket_id = await create_new_ticket(
            telegram_id,
            new_user_id,
            chat_id,
            user_region,
            user_position,
            fsm_user_data["request_type"],
            fsm_user_data["request_description"],
            has_photo)
        
    await state.clear()
    
    if new_ticket_id is None:
        content = "–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–µ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞ üôÅ\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑."
    else:
        content = f"–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞ ‚úÖ\n–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ {new_ticket_id}"
    await callback.message.answer(content,
                         reply_markup=back_to_main())